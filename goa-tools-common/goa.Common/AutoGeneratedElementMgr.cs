using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Autodesk.Revit.DB;
using Autodesk.Revit.DB.ExtensibleStorage;

namespace goa.Common
{
    public class AutoGeneratedElementMgr
    {
        private Document doc;
        private DataStorage ds;
        private Entity en;
        private string id;

        /// <summary>
        /// Create one manager instance per session, or per user-click.
        /// Do not create inside big loops, might cost RAM.
        /// </summary>
        /// <param name="_doc">Current document.</param>
        /// <param name="_id">For identifying the Generator, e.g. addin, method, project..</param>
        public AutoGeneratedElementMgr(Document _doc, string _id)
        {
            this.doc = _doc;
            this.ds = new FilteredElementCollector(doc)
                .OfClass(typeof(DataStorage))
                .First(x => x.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema) != null) as DataStorage;
            this.en = this.ds.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema);
            this.id = _id;
        }

        /// <summary>
        /// Call this method once when launch addin / external-command.
        /// </summary>
        public static void Initialize(Document doc)
        {
            if (SchemaTypes.Initialized == false)
                SchemaTypes.InitializeTypes_AutoGeneratedElementsMgr();
            var ds = new FilteredElementCollector(doc)
                .OfClass(typeof(DataStorage))
                .FirstOrDefault(x => x.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema) != null);
            if (ds != null)
                return;
            //create data storage element
            using (Transaction trans = new Transaction(doc, "创建自动生成图元记录表"))
            {
                trans.Start();
                ds = DataStorage.Create(doc);
                Entity en = new Entity(SchemaTypes.AutoGeneratedElementMgrSchema);
                ds.SetEntity(en);
                trans.Commit();
            }
        }

        /// <summary>
        /// Reads unique ids of auto-generated element, previously stored inside document.
        /// </summary>
        public List<string> ReadIds()
        {
            var dic = this.en.Get<IDictionary<string, Entity>>("ElementListOfId");
            Entity en_list;
            bool b = dic.TryGetValue(this.id, out en_list);
            List<string> list;
            if (b)
                list = en_list.Get<IList<string>>("ElementList").ToList();
            else
                list = new List<string>();
            return list;
        }

        /// <summary>
        /// Need open transaction. 
        /// Add newly created elements' unique ids to list of auto-generated element, store back into document.
        /// </summary>
        public void SaveIds(IEnumerable<string> _uids)
        {
            var dic = this.en.Get<IDictionary<string, Entity>>("ElementListOfId");
            Entity en_list;
            bool b = dic.TryGetValue(this.id, out en_list);
            if (!b)
                en_list = new Entity(SchemaTypes.ElementListOfId);
            IList<string> list = en_list.Get<IList<string>>("ElementList").ToList();
            list.AddRange(_uids);
            list = list.Distinct().ToList();
            en_list.Set<IList<string>>("ElementList", list);
            dic[this.id] = en_list;
            this.en.Set<IDictionary<string, Entity>>("ElementListOfId", dic);
            this.ds.SetEntity(this.en);
        }

        /// <summary>
        /// Need open transaction. 
        /// Purge all unique ids that point to deleted elements.
        /// </summary>
        public void CleanUp()
        {
            var dic = this.en.Get<IDictionary<string, Entity>>("ElementListOfId");
            var en_list = dic[this.id];
            var list = en_list.Get<IList<string>>("ElementList").ToList();

            list = list.Where(x => this.doc.GetElement(x) != null).ToList();

            en_list.Set<IList<string>>("ElementList", list);
            dic[this.id] = en_list;
            this.en.Set<IDictionary<string, Entity>>("ElementListOfId", dic);
            this.ds.SetEntity(this.en);
        }
    }

    public partial class SchemaTypes
    {
        public static Schema AutoGeneratedElementMgrSchema;
        public static Guid Guid_AutoGeneratedElementMgrSchema = new Guid("4d0ebcfe-7603-466e-9369-6298de31dd47");

        public static Schema ElementListOfId;
        public static Guid Guid_ElementListOfId = new Guid("3b5485ae-e02d-49ac-b7fb-72a001085b96");
        public static void InitializeTypes_AutoGeneratedElementsMgr()
        {
            ElementListOfId = Schema.Lookup(Guid_ElementListOfId);
            if (ElementListOfId == null)
                ElementListOfId = create_ElementListOfId();
            AutoGeneratedElementMgrSchema = Schema.Lookup(Guid_AutoGeneratedElementMgrSchema);
            if (AutoGeneratedElementMgrSchema == null)
                AutoGeneratedElementMgrSchema = create_AutoGeneratedElementMgrSchema();
            Initialized = true;
        }
        private static Schema create_AutoGeneratedElementMgrSchema()
        {
            SchemaBuilder sb = new SchemaBuilder(Guid_AutoGeneratedElementMgrSchema);
            sb.SetSchemaName("AutoGeneratedElementMgrSchema");
            sb.SetReadAccessLevel(AccessLevel.Public);
            FieldBuilder fb1 = sb.AddMapField("ElementListOfId", typeof(string), typeof(Entity)); //addin_id / element_list_entity
            fb1.SetSubSchemaGUID(Guid_ElementListOfId);

            Schema sm = sb.Finish();
            return sm;
        }
        private static Schema create_ElementListOfId()
        {
            SchemaBuilder sb = new SchemaBuilder(Guid_ElementListOfId);
            sb.SetSchemaName("ElementListOfId");
            sb.SetReadAccessLevel(AccessLevel.Public);
            FieldBuilder fb1 = sb.AddArrayField("ElementList", typeof(string)); //element unique ids

            Schema sm = sb.Finish();
            return sm;
        }
    }
}
